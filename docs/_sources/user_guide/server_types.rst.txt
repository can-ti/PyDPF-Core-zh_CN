.. _user_guide_server_types:

===========================
Client-server communication
===========================
**客户端-服务器通信**

Terminology
-----------

DPF 基于 **客户端-服务器** 架构。

DPF 服务器是一组支持 DPF 功能的文件。

PyDPF-Core 是一个与 DPF 服务器通信的 Python 客户端应用程序接口，可以直接 **在同一进程中** ，也可以使用 **gRPC** 通过网络与 DPF 服务器通信。


DPF Server in the same process
------------------------------
**同进程 DPF Server**

默认情况下，PyDPF-Core 客户端和 DPF 服务器在同一个进程中，使用 :class:`InProcess <ansys.dpf.core.server_types.InProcessServer>` 类。

.. code-block::
	   
    from ansys.dpf import core as dpf
    local_server = dpf.start_local_server()
    local_server

.. rst-class:: sphx-glr-script-out

 .. code-block:: none
 
    <ansys.dpf.core.server_types.InProcessServer object at ...>

现在可以使用这个 DPF 服务器来实例化模型、操作符等。

.. code-block::
	
    # 实例化一个操作符
    local_operator = dpf.operators.results.displacement(server=local_server)
	
    # 实例化一个模型
    from ansys.dpf.core import examples
    local_model = dpf.Model(examples.find_simple_bar(), server=local_server)
	

DPF Server through the network using gRPC
-----------------------------------------
**使用 gRPC 通过网络访问 DPF 服务器**

:class:`GrpcServer <ansys.dpf.core.server_types.GrpcServer>` 类用于启用 gRPC 通信：

.. code-block::
	   
    from ansys.dpf import core as dpf
    grpc_server_config = dpf.AvailableServerConfigs.GrpcServer
    grpc_server = dpf.start_local_server(config=grpc_server_config)
    grpc_server

.. rst-class:: sphx-glr-script-out

 .. code-block:: none
 
    <ansys.dpf.core.server_types.GrpcServer object at ...>

您可以获取服务器端口和 IP 地址：

.. code-block::

    print(grpc_server)
	
.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    DPF Server: {'server_ip': '127.0.0.1', 'server_port': 50052, 'server_process_id': 9999, 'server_version': '6.0', 'os': 'nt'}
	
您可以从另一台机器远程连接到 DPF 服务器，并实例化模型、运算符等：

.. code-block::
	   
    from ansys.dpf import core as dpf
    grpc_remote_server = dpf.connect_to_server(ip='127.0.0.1', port=50052)
    
    # instantiate an operator
    remote_operator = dpf.operators.results.displacement(server=grpc_remote_server)
    
    # instantiate a model
    from ansys.dpf.core import examples
    remote_model = dpf.Model(examples.find_simple_bar(), server=grpc_remote_server)
	
通过使用 gRPC 的网络，DPF sever 可实现分布式计算功能。更多信息，请参阅 :ref:`distributed_post` 。
	

DPF Server startup using a configuration
----------------------------------------
**使用配置启动 DPF 服务器**

不同的 DPF 服务器类型可以使用 :class:`AvailableServerConfigs <ansys.dpf.core.server_factory.AvailableServerConfigs>` 配置之一来启动。

.. code-block::
    
    in_process_config = dpf.AvailableServerConfigs.InProcessServer
    in_process_server = dpf.start_local_server(config=in_process_config)
    
    grpc_config = dpf.AvailableServerConfigs.GrpcServer
    grpc_server = dpf.start_local_server(config=grpc_config)
    
    legacy_grpc_config = dpf.AvailableServerConfigs.LegacyGrpcServer
    legacy_grpc_server = dpf.start_local_server(config=legacy_grpc_config)


Advanced concepts and release history
-------------------------------------
**进阶概念及版本发布历史**

与 DPF 服务器的通信逻辑是在使用 :class:`ServerConfig <ansys.dpf.core.server_factory.ServerConfig>` 类的实例启动 DPF 服务器时定义的。
DPF 中有不同的预定义服务器配置，每种配置都能满足不同的使用情况。有关详细信息，请参阅 :class:`AvailableServerConfigs <ansys.dpf.core.server_factory.AvailableServerConfigs>` 类。

- :class:`GrpcServer <ansys.dpf.core.server_types.GrpcServer>` 配置在服务器版本 4.0（Ansys 2022 R2）及更高版本中可用。
  通过该配置，您可以告诉客户端通过 gRPC 通信协议与 DPF 服务器通信，从而通过网络远程连接到 DPF 服务器。
  虽然它可用于与运行在同一本地计算机上的 DPF 服务器进行通信，但下一种配置更适合该选项。
- :class:`InProcessServer <ansys.dpf.core.server_types.InProcessServer>` 配置在服务器版本 4.0（Ansys 2022 R2）及更高版本中可用。
  它向客户端表明，本地计算机上已安装 DPF 服务器，从而支持客户端自身 Python 进程以内直接调用服务器二进制文件。
  这无需在客户端和服务器之间复制和发送数据，使得调用服务器功能的速度更快，并且使用更少的内存。
- 只有 :class:`LegacyGrpcServer <ansys.dpf.core.server_types.LegacyGrpcServer>` 配置适用于 4.0 及更早版本的服务器（Ansys 2022 R1、2021 R2 和 2021 R1）。
  客户端通过 gRPC 通信协议与本地或远程 DPF 服务器通信。

对于使用 Ansys 2023 R1 及更高版本的 DPF，:class:`InProcessServer <ansys.dpf.core.server_types.InProcessServer>` 是默认配置，这意味着服务器在本地计算机上启动。
要在远程机器上启动 DPF 服务器并使用 gRPC 与之通信，请使用 :class:`GrpcServer <ansys.dpf.core.server_types.GrpcServer>` 配置，如 :ref:`ref_server_types_example` 所示。
