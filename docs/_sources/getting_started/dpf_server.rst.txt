.. _ref_dpf_server:

==========
DPF Server
==========

DPF 为数值模拟用户和工程师提供了访问和转换模拟数据的工具箱。利用 DPF，您可以在仿真工作流程中对大量仿真数据进行复杂的预处理或后处理。

在 Ansys 2021 R1 及更高版本中，DPF 服务器被打包在 **Ansys 安装程序** 中。

它还可以作为独立软件包提供，其中包含运行 DPF 功能所需的所有文件。单机版 DPF 服务器可在 Ansys 客户门户网站的 `DPF 预发布页面 <https://download.ansys.com/Others/DPF%20Pre-Release>`_ 上获取。
DPF Server 的第一个单机版是 6.0 (2023 R2)。

本页各节将介绍如何安装和使用独立的 DPF 服务器。

* 要快速开始使用 PyDPF，请参阅 :ref:`ref_getting_started` 。
* 有关 DPF 及其使用的更多信息，请参阅 :ref:`ref_user_guide` 。


.. _target_installing_server:

Install DPF Server
------------------

**安装 DPF 服务器**

#. 根据情况下载 ``ansys_dpf_server_win_v2024.2.pre0.zip`` 或 ``ansys_dpf_server_lin_v2024.2.pre0.zip`` 文件。
#. 解压该软件包。
#. 可选：下载任何其他适当的插件 ZIP 文件，并解压缩该软件包。例如，要访问 Linux 下的 ``composites`` 插件，请下载 ``ansys_dpf_composites_lin_v2024.2.pre0.zip`` ，并将软件包解压缩到与 ``ansys_dpf_server_lin_v2024.2.pre0.zip`` 相同的位置。
#. 切换到解压软件包的根文件夹（ ``ansys_dpf_server_win_v2024.2.pre0`` ）。
#. 在 Python 环境中运行此命令：

.. code::

    pip install -e .


正如 :ref:`licensing` 中所述，一个独立的 DPF 服务器受 `DPFPreviewLicenseAgreement <https://download.ansys.com/-/media/dpf/dpfpreviewlicenseagreement.ashx?la=en&hash=CCFB07AE38C638F0D43E50D877B5BC87356006C9>`_ 
文件中指定的许可条款保护，该文件可在 ANSYS 门户的 `DPF 预发行页面 <https://download.ansys.com/Others/DPF%20Pre-Release>`_ 中获得。
要接受这些条款，必须设置此环境变量：

.. code::

    ANSYS_DPF_ACCEPT_LA=Y

要使用 :ref:`licensed DPF capabilities <target_to_ansys_license_mechanism>` ，您必须根据 :ref:`configure_licensing` 中的说明设置 ``ANSYSLMD_LICENSE_FILE`` 环境变量，使其指向有效的本地或远程许可证。


Use DPF Server
--------------

DPF 服务器受 `DPFPreviewLicenseAgreement <https://download.ansys.com/-/media/dpf/dpfpreviewlicenseagreement.ashx?la=en&hash=CCFB07AE38C638F0D43E50D877B5BC87356006C9>`_ 文件中指定的许可条款保护，
该文件可在 Ansys Customer Portal 的 `DPF Pre-Release 页面 <https://download.ansys.com/Others/DPF%20Pre-Release>`_ 中获取。

Run DPF Server with PyDPF
~~~~~~~~~~~~~~~~~~~~~~~~~

PyDPF-Core 是与 **DPF 服务器** 通信的 Python 客户端 API，可通过网络使用 gRPC 或直接在同一进程中进行通信。PyDPF-Post 是一个基于 PyDPF-Core 的 Python 后处理模块。

PyDPF-Core 和 PyDPF-Post 都可以与 DPF Server 一起使用。PyDPF-Core 的安装说明可以在 PyDPF-Core 的 `Getting started <https://dpf.docs.pyansys.com/version/stable/getting_started/install.html>`_ 中找到。
PyDPF-Post 的安装说明可以在 PyDPF-Post `Getting started <https://post.docs.pyansys.com/version/stable/getting_started/install.html>`_ 中找到。

使用 PyDPF-Core 和 PyDPF-Post，大多数 DPF 实体的首次创建都会以当前默认配置和上下文启动 DPF 服务器。例如，以下代码会在后台自动启动 DPF 服务器：

.. code::

    from ansys.dpf import core as dpf
    data_sources = dpf.DataSources()

通过 PyDPF-Core，您还可以使用这段代码显式启动 DPF 服务器：

.. code::

    from ansys.dpf import core as dpf
    server = dpf.start_local_server()

要从 Python 环境之外启动 DPF 服务器，也可以使用 DPF 服务器软件包中提供的执行脚本。
在 Windows 上，通过运行解压包中的 ``Ans.Dpf.Grpc.bat`` 文件启动 DPF 服务器。
在 Linux 上，运行解压包中的 ``Ans.Dpf.Grpc.sh`` 文件，启动 DPF 服务器。

Manage multiple DPF Server installations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**管理多个 DPF Server 安装**

当你运行一个需要连接到服务器的方法时，或者当你使用 ``start_local_server()`` 方法时，PyDPF 会自动启动一个 DPF 服务器的本地实例。
``start_local_server()`` 方法允许您在必要时选择使用哪个 DPF 服务安装，通过它的 ``ansys_path`` 参数。
除非另有说明，PyDPF 遵循以下逻辑自动检测并择优选用本地已安装的 DPF Server 版本：

- 如果设置了环境变量 ``ANSYS_DPF_PATH`` 并以 DPF 服务器安装的有效路径为目标，它将优先使用 ``ANSYS_DPF_PATH`` 环境变量。
- 然后，它会检查当前活动的 Python 环境中是否安装了独立的 DPF 服务器，并使用可用的最新版本。
- 然后检查由 **Ansys 安装程序** 设置的 ``AWP_ROOTXXX`` 环境变量，并使用可用的最新版本。
- 如果以上所有步骤未能返回 DPF 服务器安装的有效路径，则引发一个错误。

Run DPF Server in a Docker container
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**DPF 服务器可在 Docker 容器中运行。**

#. 除了之前在 :ref:`安装 DPF 服务器 <target_installing_server>` 中提到的 ``ansys_dpf_server_lin_v2024.2.pre0.zip`` 文件，还需下载 ``Dockerfile`` 文件。
#. 可选：下载其他适当的插件 ZIP 文件。例如，要访问 Linux 的 ``composites`` 插件，请下载 ``ansys_dpf_composites_lin_v2024.2.pre0.zip`` 。
#. 将所有 ZIP 文件和 "Dockerfile "文件复制到一个文件夹中，然后导航到该文件夹。
#. 要构建 DPF Docker 容器，请运行以下命令：

.. code::

    docker build . -t dpf-core:v2024.2.pre0 --build-arg DPF_VERSION=242

#. 要运行 DPF Docker 容器，请对其进行许可。有关详细信息，请参阅 :ref:`DPF Preview License Agreement <target_to_license_terms>` 。
